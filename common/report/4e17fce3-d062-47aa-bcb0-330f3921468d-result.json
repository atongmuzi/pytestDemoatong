{"name": "test_redis", "status": "broken", "statusDetails": {"message": "redis.exceptions.ResponseError: invalid DB index", "trace": "def test_redis():\n        logger.info(\"开始执行===>\")\n        pool = redis.ConnectionPool(host=\"192.168.4.4\", port=6379, password=\"0.123abc\", db=16)\n        r = redis.Redis(connection_pool=pool)\n        logger.info(\"r is the redis===>{}\".format(r))\n        # result = r.get(\"act_lucky_draw_list\")\n        # logger.info(\"执行结果===》{}\".format(result))\n>       r.info(section=None)\n\nredis_operate.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.7/site-packages/redis/client.py:1304: in info\n    return self.execute_command('INFO')\n../venv/lib/python3.7/site-packages/redis/client.py:898: in execute_command\n    conn = self.connection or pool.get_connection(command_name, **options)\n../venv/lib/python3.7/site-packages/redis/connection.py:1192: in get_connection\n    connection.connect()\n../venv/lib/python3.7/site-packages/redis/connection.py:567: in connect\n    self.on_connect()\n../venv/lib/python3.7/site-packages/redis/connection.py:664: in on_connect\n    if nativestr(self.read_response()) != 'OK':\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Connection<host=192.168.4.4,port=6379,db=16>\n\n    def read_response(self):\n        \"Read the response from a previously sent command\"\n        try:\n            response = self._parser.read_response()\n        except socket.timeout:\n            self.disconnect()\n            raise TimeoutError(\"Timeout reading from %s:%s\" %\n                               (self.host, self.port))\n        except socket.error as e:\n            self.disconnect()\n            raise ConnectionError(\"Error while reading from %s:%s : %s\" %\n                                  (self.host, self.port, e.args))\n        except BaseException:\n            self.disconnect()\n            raise\n    \n        if self.health_check_interval:\n            self.next_health_check = time() + self.health_check_interval\n    \n        if isinstance(response, ResponseError):\n>           raise response\nE           redis.exceptions.ResponseError: invalid DB index\n\n../venv/lib/python3.7/site-packages/redis/connection.py:756: ResponseError"}, "attachments": [{"name": "log", "source": "d3d3e2ce-de40-4ef3-9180-4a87daa38b4b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7427ca46-2359-41ad-a483-762ff480992d-attachment.txt", "type": "text/plain"}], "start": 1636097254658, "stop": 1636097254805, "uuid": "c5f666fb-f266-4837-93de-c42878b777b9", "historyId": "2470b976c53a3ba91da07979e4d471a2", "testCaseId": "ccdebc5849e417ff9042ff98197e66c5", "fullName": "common.redis_operate#test_redis", "labels": [{"name": "parentSuite", "value": "common"}, {"name": "suite", "value": "redis_operate"}, {"name": "host", "value": "tongchunyan.local"}, {"name": "thread", "value": "64499-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "common.redis_operate"}]}