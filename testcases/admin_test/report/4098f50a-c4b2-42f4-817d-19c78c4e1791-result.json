{"name": "test_refund", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'json_data'", "trace": "self = <testcases.admin_test.test_refund_00001.TestAdminRefund object at 0x110898e48>\n\n    def test_refund(self):\n        order_no = \"202109261561197059274\"\n        logger.info(\"*************** 开始执行用例 *************** /n\")\n>       result = refund_admin(order_no)\n\ntest_refund_00001.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../operation/admin.py:22: in refund_admin\n    res = admin.refund(json_data=json_data, headers=headers)\n../../api/admin.py:15: in refund\n    return self.post(\"/adm/order/refund\", **kwargs)\n../../core/rest_client.py:16: in post\n    return self.request(url, \"POST\", data, json, **kwargs)\n../../core/rest_client.py:37: in request\n    return requests.post(url, data, json, **kwargs)\n../../venv/lib/python3.7/site-packages/requests/api.py:116: in post\n    return request('post', url, data=data, json=json, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmethod = 'post', url = 'https://test2_h5.pookie.com.cn/adm/order/refund'\nkwargs = {'data': None, 'headers': {'Authorization': 'NTc6MzY2MEVVQjNzVjVUc2FvczlKdzBtbXgzOTg0'}, 'json': None, 'json_data': {'order_no': '202109261561197059274', 'out_refund_reason': 'test', 'refund_reason': 'test', 'refund_type': 2, ...}}\nsession = <requests.sessions.Session object at 0x11089e978>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the body of the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'json_data'\n\n../../venv/lib/python3.7/site-packages/requests/api.py:60: TypeError"}, "attachments": [{"name": "log", "source": "99f735f6-0417-4892-8923-a8f0789d0f3e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "347fc8e9-1a2f-49a8-81cc-54cdafa127cb-attachment.txt", "type": "text/plain"}], "start": 1633942851116, "stop": 1633942851117, "uuid": "4e349f43-4e65-49ef-8aa7-02f76188feda", "historyId": "a0a6875d0f15aa537f9fb7f8ef19067b", "testCaseId": "392cae74f4aea4f9774e5ed6ec104378", "fullName": "testcases.admin_test.test_refund_00001.TestAdminRefund#test_refund", "labels": [{"name": "parentSuite", "value": "testcases.admin_test"}, {"name": "suite", "value": "test_refund_00001"}, {"name": "subSuite", "value": "TestAdminRefund"}, {"name": "host", "value": "tongchunyan.local"}, {"name": "thread", "value": "26906-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.admin_test.test_refund_00001"}]}