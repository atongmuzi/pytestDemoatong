{"name": "test_redis", "status": "broken", "statusDetails": {"message": "redis.exceptions.AuthenticationError: Authentication required.", "trace": "self = <testcases.admin_test.test_refund_00001.TestAdminRefund object at 0x111383550>\n\n    def test_redis(self):\n        logger.info(\"开始执行===>\")\n        pool = redis.ConnectionPool(host=\"192.168.4.4\", port=6379)\n        r = redis.Redis(connection_pool=pool)\n>       r.get(\"act_lucky_draw_list\")\n\ntest_refund_00001.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../venv/lib/python3.7/site-packages/redis/client.py:1606: in get\n    return self.execute_command('GET', name)\n../../venv/lib/python3.7/site-packages/redis/client.py:901: in execute_command\n    return self.parse_response(conn, command_name, **options)\n../../venv/lib/python3.7/site-packages/redis/client.py:915: in parse_response\n    response = connection.read_response()\n../../venv/lib/python3.7/site-packages/redis/connection.py:739: in read_response\n    response = self._parser.read_response()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <redis.connection.PythonParser object at 0x111395da0>\n\n    def read_response(self):\n        raw = self._buffer.readline()\n        if not raw:\n            raise ConnectionError(SERVER_CLOSED_CONNECTION_ERROR)\n    \n        byte, response = raw[:1], raw[1:]\n    \n        if byte not in (b'-', b'+', b':', b'$', b'*'):\n            raise InvalidResponse(\"Protocol Error: %r\" % raw)\n    \n        # server returned an error\n        if byte == b'-':\n            response = nativestr(response)\n            error = self.parse_error(response)\n            # if the error is a ConnectionError, raise immediately so the user\n            # is notified\n            if isinstance(error, ConnectionError):\n>               raise error\nE               redis.exceptions.AuthenticationError: Authentication required.\n\n../../venv/lib/python3.7/site-packages/redis/connection.py:340: AuthenticationError"}, "attachments": [{"name": "log", "source": "bc937fcf-ec3f-406d-ba06-ca8ee91635a9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7dcd7886-5b09-465a-a5b5-6fa01540bd05-attachment.txt", "type": "text/plain"}], "start": 1635751257934, "stop": 1635751258006, "uuid": "77fd8e9f-2844-4572-ba03-3875588582d5", "historyId": "edd94b8e0b7cc16f55f3f2a5cdddab4c", "testCaseId": "f9cb3f4b5bcbf7bba16b4c86edf3510a", "fullName": "testcases.admin_test.test_refund_00001.TestAdminRefund#test_redis", "labels": [{"name": "parentSuite", "value": "testcases.admin_test"}, {"name": "suite", "value": "test_refund_00001"}, {"name": "subSuite", "value": "TestAdminRefund"}, {"name": "host", "value": "tongchunyan.local"}, {"name": "thread", "value": "19646-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.admin_test.test_refund_00001"}]}