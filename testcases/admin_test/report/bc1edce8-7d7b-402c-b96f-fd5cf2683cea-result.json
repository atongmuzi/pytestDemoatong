{"name": "test_refund", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <testcases.admin_test.test_refund_00001.TestAdminRefund object at 0x106d20c88>\n\n    def test_refund(self):\n        order_no = \"202109261561197059274\"\n        logger.info(\"*************** 开始执行用例 *************** /n\")\n>       result = refund_admin(order_no)\n\ntest_refund_00001.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../operation/admin.py:23: in refund_admin\n    return res_deal(res)\n../../common/res_deal.py:7: in res_deal\n    if res.json()[\"code\"] == 0 and \"success\" in res.json()[\"msg\"]:\n../../venv/lib/python3.7/site-packages/requests/models.py:897: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x1064f92b0>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n<meta charset=\"utf-8\">\\n<title>Error</title>\\n</head>\\n<body>\\n<pre>Cannot POST /adm/order/refund</pre>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "log", "source": "c8e0c8a8-0af3-4231-8b6c-2cb66d8b4e40-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "50502361-76e8-4563-bebf-e960dea803cf-attachment.txt", "type": "text/plain"}], "start": 1633943105521, "stop": 1633943105751, "uuid": "55311c3f-c4ac-44eb-9ee5-887f4351f2c6", "historyId": "a0a6875d0f15aa537f9fb7f8ef19067b", "testCaseId": "392cae74f4aea4f9774e5ed6ec104378", "fullName": "testcases.admin_test.test_refund_00001.TestAdminRefund#test_refund", "labels": [{"name": "parentSuite", "value": "testcases.admin_test"}, {"name": "suite", "value": "test_refund_00001"}, {"name": "subSuite", "value": "TestAdminRefund"}, {"name": "host", "value": "tongchunyan.local"}, {"name": "thread", "value": "27036-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.admin_test.test_refund_00001"}]}