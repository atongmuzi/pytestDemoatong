{"name": "test_refund", "status": "broken", "statusDetails": {"message": "requests.exceptions.InvalidURL: Failed to parse: https:%20", "trace": "self = <PreparedRequest [POST]>\nurl = 'https: // test2api.pookie.com.cn/adm/order/refund'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/requests/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n>           scheme, auth, host, port, path, query, fragment = parse_url(url)\n\n../../venv/lib/python3.7/site-packages/requests/models.py:379: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = 'https:%20'\n\n    def parse_url(url):\n        \"\"\"\n        Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n        performed to parse incomplete urls. Fields not provided will be None.\n    \n        Partly backwards-compatible with :mod:`urlparse`.\n    \n        Example::\n    \n            >>> parse_url('http://google.com/mail/')\n            Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n            >>> parse_url('google.com:80')\n            Url(scheme=None, host='google.com', port=80, path=None, ...)\n            >>> parse_url('/foo?bar')\n            Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n        \"\"\"\n    \n        # While this code has overlap with stdlib's urlparse, it is much\n        # simplified for our needs and less annoying.\n        # Additionally, this implementations does silly things to be optimal\n        # on CPython.\n    \n        if not url:\n            # Empty\n            return Url()\n    \n        # Prevent CVE-2019-9740.\n        # adapted from https://github.com/python/cpython/pull/12755\n        url = _contains_disallowed_url_pchar_re.sub(lambda match: quote(match.group()), url)\n    \n        scheme = None\n        auth = None\n        host = None\n        port = None\n        path = None\n        fragment = None\n        query = None\n    \n        # Scheme\n        if '://' in url:\n            scheme, url = url.split('://', 1)\n    \n        # Find the earliest Authority Terminator\n        # (http://tools.ietf.org/html/rfc3986#section-3.2)\n        url, path_, delim = split_first(url, ['/', '?', '#'])\n    \n        if delim:\n            # Reassemble the path\n            path = delim + path_\n    \n        # Auth\n        if '@' in url:\n            # Last '@' denotes end of auth part\n            auth, url = url.rsplit('@', 1)\n    \n        # IPv6\n        if url and url[0] == '[':\n            host, url = url.split(']', 1)\n            host += ']'\n    \n        # Port\n        if ':' in url:\n            _host, port = url.split(':', 1)\n    \n            if not host:\n                host = _host\n    \n            if port:\n                # If given, ports must be integers. No whitespace, no plus or\n                # minus prefixes, no non-integer digits such as ^2 (superscript).\n                if not port.isdigit():\n>                   raise LocationParseError(url)\nE                   urllib3.exceptions.LocationParseError: Failed to parse: https:%20\n\n../../venv/lib/python3.7/site-packages/urllib3/util/url.py:207: LocationParseError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.admin_test.test_refund_00001.TestAdminRefund object at 0x10f25a7b8>\n\n    def test_refund(self):\n        sql = \"select order_no from user_order where user_id in('1415') and\" \\\n              \" status not in(0,30,31,300) and real_price >= 0.1 limit 3 \"\n        data = db.select_db(sql)\n        logger.info(\"data===>{}\".format(data))\n        for i in range(len(data)):\n            logger.info(data[i][\"order_no\"])\n            order_no = data[i][\"order_no\"]\n            logger.info(\"*************** 开始执行用例 *************** /n\")\n>           result = refund_admin(order_no)\n\ntest_refund_00001.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../operation/admin.py:22: in refund_admin\n    res = admin.refund(json=json_data, headers=headers)\n../../api/admin.py:17: in refund\n    return self.post(\"/adm/order/refund\", **kwargs)\n../../core/rest_client.py:16: in post\n    return self.request(url, \"POST\", data, json, **kwargs)\n../../core/rest_client.py:37: in request\n    return requests.post(url, data, json, **kwargs)\n../../venv/lib/python3.7/site-packages/requests/api.py:116: in post\n    return request('post', url, data=data, json=json, **kwargs)\n../../venv/lib/python3.7/site-packages/requests/api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\n../../venv/lib/python3.7/site-packages/requests/sessions.py:510: in request\n    prep = self.prepare_request(req)\n../../venv/lib/python3.7/site-packages/requests/sessions.py:453: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n../../venv/lib/python3.7/site-packages/requests/models.py:313: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>\nurl = 'https: // test2api.pookie.com.cn/adm/order/refund'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/requests/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n>           raise InvalidURL(*e.args)\nE           requests.exceptions.InvalidURL: Failed to parse: https:%20\n\n../../venv/lib/python3.7/site-packages/requests/models.py:381: InvalidURL"}, "attachments": [{"name": "log", "source": "acf3abf2-3798-4c43-a431-4953dcba4e0e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "ba9aa43d-689c-45ba-8c94-bdbcbccb3ac3-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "6963accc-7d0f-4836-9a78-798d31863e4d-attachment.txt", "type": "text/plain"}], "start": 1637292160983, "stop": 1637292161070, "uuid": "cc0c7325-f62a-4af4-8f15-fab473a18d88", "historyId": "a0a6875d0f15aa537f9fb7f8ef19067b", "testCaseId": "392cae74f4aea4f9774e5ed6ec104378", "fullName": "testcases.admin_test.test_refund_00001.TestAdminRefund#test_refund", "labels": [{"name": "parentSuite", "value": "testcases.admin_test"}, {"name": "suite", "value": "test_refund_00001"}, {"name": "subSuite", "value": "TestAdminRefund"}, {"name": "host", "value": "tongchunyan.local"}, {"name": "thread", "value": "56268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.admin_test.test_refund_00001"}]}