{"name": "test_user_pre_trade[1-357-1-20210602420390020015491-1-act_id_list0-False-True-0-success]", "status": "broken", "statusDetails": {"message": "TypeError: can only concatenate str (not \"Response\") to str", "trace": "self = <testcases.api_test.test_06_pre_order.TestUserTrade object at 0x104599518>\norder_type = 1, item_id = 357, sku_type = 1\nsku_no = '20210602420390020015491-1', act_id_list = [], use_pcoin = False\nexcept_result = True, except_code = 0, except_msg = 'success'\n\n    @pytest.mark.parametrize(\n        \"order_type, item_id, sku_type, sku_no, act_id_list, use_pcoin,\"\n        \" except_result, except_code, except_msg\",api_data[\"test_pre_trade\"])\n    def test_user_pre_trade(self, order_type, item_id, sku_type, sku_no, act_id_list, use_pcoin, except_result, except_code, except_msg):\n        logger.info(\"**********开始执行测试用例**********\")\n>       result = pre_trade(order_type, item_id, sku_type, sku_no, act_id_list, use_pcoin)\n\ntest_06_pre_order.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\norder_type = 1, item_id = 357, sku_type = 1\nsku_no = '20210602420390020015491-1', act_id_list = [], use_pcoin = False\n\n    def pre_trade(order_type,item_id,sku_type,sku_no,act_id_list,use_pcoin):\n        \"\"\"\n        预下单，选择盲盒的盒子\n        :return:自定义的关键字返回结果 result\n        \"\"\"\n        result = ResultBase()\n        json_data = {\n            \"order_type\":order_type,\n            \"item_id\":item_id,\n            \"sku_type\":sku_type,\n            \"sku_no\":sku_no,\n            \"act_id_list\":act_id_list,\n            \"use_pcoin\":use_pcoin\n        }\n        header = {\n            \"Authorization\": \"ODM3OjEzMDlVRWN5QmI3YnNPMm1WWXNIUkpjMjU3Njoy\",\n            \"Content-Type\": \"application/json\"\n    \n        }\n        res = order.pre_order(json=json_data,headers=header)\n>       print(\"**********返回结果：\"+res+\"**********\")\nE       TypeError: can only concatenate str (not \"Response\") to str\n\n../../operation/order.py:26: TypeError"}, "attachments": [{"name": "log", "source": "6bd956bd-fe6f-41bb-908e-71b874af18ad-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1219cf0e-1e8b-43d3-9388-89795a12e425-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "order_type", "value": "1"}, {"name": "item_id", "value": "357"}, {"name": "sku_type", "value": "1"}, {"name": "sku_no", "value": "'20210602420390020015491-1'"}, {"name": "act_id_list", "value": "[]"}, {"name": "use_pcoin", "value": "False"}, {"name": "except_result", "value": "True"}, {"name": "except_code", "value": "0"}, {"name": "except_msg", "value": "'success'"}], "start": 1622703461010, "stop": 1622703461115, "uuid": "02782eeb-f166-4c00-81a2-c99c56c70339", "historyId": "12305a03b755a0afaad3347f4673b965", "testCaseId": "bc04bbb2074bbe8227ceba529777e9b0", "fullName": "testcases.api_test.test_06_pre_order.TestUserTrade#test_user_pre_trade", "labels": [{"name": "parentSuite", "value": "testcases.api_test"}, {"name": "suite", "value": "test_06_pre_order"}, {"name": "subSuite", "value": "TestUserTrade"}, {"name": "host", "value": "tongchunyan.local"}, {"name": "thread", "value": "20757-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.test_06_pre_order"}]}