{"name": "test_init_wx_userID[1851]", "status": "broken", "statusDetails": {"message": "redis.exceptions.ConnectionError: Error 60 connecting to 192.168.4.4:6379. Operation timed out.", "trace": "self = Connection<host=192.168.4.4,port=6379,db=0>\n\n    def connect(self):\n        \"Connects to the Redis server if not already connected\"\n        if self._sock:\n            return\n        try:\n>           sock = self._connect()\n\n../../venv/lib/python3.7/site-packages/redis/connection.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Connection<host=192.168.4.4,port=6379,db=0>\n\n    def _connect(self):\n        \"Create a TCP socket connection\"\n        # we want to mimic what socket.create_connection does to support\n        # ipv4/ipv6, but we want to set options prior to calling\n        # socket.connect()\n        err = None\n        for res in socket.getaddrinfo(self.host, self.port, self.socket_type,\n                                      socket.SOCK_STREAM):\n            family, socktype, proto, canonname, socket_address = res\n            sock = None\n            try:\n                sock = socket.socket(family, socktype, proto)\n                # TCP_NODELAY\n                sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    \n                # TCP_KEEPALIVE\n                if self.socket_keepalive:\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                    for k, v in iteritems(self.socket_keepalive_options):\n                        sock.setsockopt(socket.IPPROTO_TCP, k, v)\n    \n                # set the socket_connect_timeout before we connect\n                sock.settimeout(self.socket_connect_timeout)\n    \n                # connect\n                sock.connect(socket_address)\n    \n                # set the socket_timeout now that we're connected\n                sock.settimeout(self.socket_timeout)\n                return sock\n    \n            except socket.error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\n../../venv/lib/python3.7/site-packages/redis/connection.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Connection<host=192.168.4.4,port=6379,db=0>\n\n    def _connect(self):\n        \"Create a TCP socket connection\"\n        # we want to mimic what socket.create_connection does to support\n        # ipv4/ipv6, but we want to set options prior to calling\n        # socket.connect()\n        err = None\n        for res in socket.getaddrinfo(self.host, self.port, self.socket_type,\n                                      socket.SOCK_STREAM):\n            family, socktype, proto, canonname, socket_address = res\n            sock = None\n            try:\n                sock = socket.socket(family, socktype, proto)\n                # TCP_NODELAY\n                sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    \n                # TCP_KEEPALIVE\n                if self.socket_keepalive:\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                    for k, v in iteritems(self.socket_keepalive_options):\n                        sock.setsockopt(socket.IPPROTO_TCP, k, v)\n    \n                # set the socket_connect_timeout before we connect\n                sock.settimeout(self.socket_connect_timeout)\n    \n                # connect\n>               sock.connect(socket_address)\nE               TimeoutError: [Errno 60] Operation timed out\n\n../../venv/lib/python3.7/site-packages/redis/connection.py:603: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.init_test.test_init_phone.TestInitPhone object at 0x10b445400>\nuserID = '1851'\n\n    @pytest.mark.parametrize(\"userID\", api_data[\"test_init_wx_userID\"])\n    def test_init_wx_userID(self, userID):\n        \"\"\"批量初始化userID为新用户\"\"\"\n        rm_result = rm.generate_random_str(10)\n        phone_new = userID + rm_result\n        logger.info(\"随机数===>{}\".format(rm_result))\n        logger.info(\"随机更新的手机号===>{}\".format(phone_new))\n        sql_up_user = \"update user set phone = '%s' , phone_encrypt = '%s'  where id ='%s'\"\\\n                      % (phone_new, phone_new, userID)\n        sql_up_wx = \"update user_wechat_channel set open_id ='%s',union_id = '%s' \" \\\n                    \"where user_id ='%s'\" % (phone_new, phone_new, userID)\n        logger.info(\"----------开始更新user表----------\")\n        db.execute_db(sql_up_user)\n        logger.info(\"----------执行更新user表成功----------\")\n        logger.info(\"----------开始更新user_wechat_channel表----------\")\n        db.execute_db(sql_up_wx)\n        logger.info(\"----------执行更新user_wechat_channel表成功----------\")\n        logger.info(\"----------执行清除缓存的操作----------\")\n>       rs.test_redis(userID)\n\ntest_init_phone.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../common/redis_operate.py:20: in test_redis\n    self.r.delete(token_key)\n../../venv/lib/python3.7/site-packages/redis/client.py:1567: in delete\n    return self.execute_command('DEL', *names)\n../../venv/lib/python3.7/site-packages/redis/client.py:898: in execute_command\n    conn = self.connection or pool.get_connection(command_name, **options)\n../../venv/lib/python3.7/site-packages/redis/connection.py:1192: in get_connection\n    connection.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Connection<host=192.168.4.4,port=6379,db=0>\n\n    def connect(self):\n        \"Connects to the Redis server if not already connected\"\n        if self._sock:\n            return\n        try:\n            sock = self._connect()\n        except socket.timeout:\n            raise TimeoutError(\"Timeout connecting to server\")\n        except socket.error as e:\n>           raise ConnectionError(self._error_message(e))\nE           redis.exceptions.ConnectionError: Error 60 connecting to 192.168.4.4:6379. Operation timed out.\n\n../../venv/lib/python3.7/site-packages/redis/connection.py:563: ConnectionError"}, "description": "批量初始化userID为新用户", "attachments": [{"name": "log", "source": "3d68997d-0735-45ae-ac5c-2eea9565ce94-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "897ed46f-4afd-471f-9125-eda4c89ca144-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "userID", "value": "'1851'"}], "start": 1644997360806, "stop": 1644997369549, "uuid": "17db92af-31e1-46bf-87f4-19786f8c9fbd", "historyId": "834be8a2f8ea7f1fb8572d28b631f7bf", "testCaseId": "8a9658eb212b5510882c6fac8be62cc0", "fullName": "testcases.init_test.test_init_phone.TestInitPhone#test_init_wx_userID", "labels": [{"name": "parentSuite", "value": "testcases.init_test"}, {"name": "suite", "value": "test_init_phone"}, {"name": "subSuite", "value": "TestInitPhone"}, {"name": "host", "value": "tongchunyan.local"}, {"name": "thread", "value": "7277-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.init_test.test_init_phone"}]}